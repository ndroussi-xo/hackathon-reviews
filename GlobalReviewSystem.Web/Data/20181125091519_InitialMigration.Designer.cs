// <auto-generated />
using System;
using GlobalReviewSystem.Web.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GlobalReviewSystem.Web.Data
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181125091519_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GlobalReviewSystem.Models.Advertisement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdvertiserId");

                    b.Property<string>("AdvertiserId1");

                    b.Property<decimal>("Credit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description");

                    b.Property<string>("ImageUrl");

                    b.Property<bool>("IsEnabled");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AdvertiserId");

                    b.HasIndex("AdvertiserId1");

                    b.ToTable("Advertisements");
                });

            modelBuilder.Entity("GlobalReviewSystem.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("AppUser");
                });

            modelBuilder.Entity("GlobalReviewSystem.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("GlobalReviewSystem.Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("City");

                    b.Property<string>("Email");

                    b.Property<string>("Fax");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid?>("ParentCompanyId");

                    b.Property<string>("Phone");

                    b.Property<string>("Zip");

                    b.HasKey("Id");

                    b.HasIndex("ParentCompanyId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("GlobalReviewSystem.Models.Country", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2);

                    b.Property<string>("Name");

                    b.HasKey("Code");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("GlobalReviewSystem.Models.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Type");

                    b.Property<Guid?>("ValidatorId");

                    b.HasKey("Id");

                    b.HasIndex("ValidatorId");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("GlobalReviewSystem.Models.Form", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Forms");
                });

            modelBuilder.Entity("GlobalReviewSystem.Models.FormField", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("DisplayName");

                    b.Property<Guid?>("FieldId");

                    b.Property<Guid?>("FormId");

                    b.Property<bool>("IsRequired");

                    b.Property<int>("Position");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("FormId");

                    b.ToTable("FormFields");
                });

            modelBuilder.Entity("GlobalReviewSystem.Models.FormFieldValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("FormFieldId");

                    b.Property<long>("PostId");

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("FormFieldId");

                    b.HasIndex("PostId");

                    b.ToTable("FormFieldValues");
                });

            modelBuilder.Entity("GlobalReviewSystem.Models.Image", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alt");

                    b.Property<bool>("IsDefault");

                    b.Property<string>("Name");

                    b.Property<Guid>("ProductId");

                    b.Property<string>("Url")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("GlobalReviewSystem.Models.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdvertiserId");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaymentDate");

                    b.Property<string>("TransactionId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AdvertiserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("GlobalReviewSystem.Models.Post", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("PostedAt");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("GlobalReviewSystem.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CategoryId");

                    b.Property<Guid>("CompanyId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("GlobalReviewSystem.Models.StateRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryCode")
                        .HasMaxLength(2);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CountryCode");

                    b.ToTable("StateRegions");
                });

            modelBuilder.Entity("GlobalReviewSystem.Models.Validator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("FieldId");

                    b.Property<long?>("FormFieldId");

                    b.Property<string>("Name");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("FormFieldId");

                    b.ToTable("Validators");
                });

            modelBuilder.Entity("GlobalReviewSystem.Models.ValidatorProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("ParamType");

                    b.Property<Guid>("ValidatorId");

                    b.HasKey("Id");

                    b.HasIndex("ValidatorId");

                    b.ToTable("ValidatorProperties");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("GlobalReviewSystem.Models.Advertiser", b =>
                {
                    b.HasBaseType("GlobalReviewSystem.Models.AppUser");

                    b.Property<decimal>("Credit")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("Advertiser");

                    b.HasDiscriminator().HasValue("Advertiser");
                });

            modelBuilder.Entity("GlobalReviewSystem.Models.Advertisement", b =>
                {
                    b.HasOne("GlobalReviewSystem.Models.AppUser", "Advertiser")
                        .WithMany()
                        .HasForeignKey("AdvertiserId");

                    b.HasOne("GlobalReviewSystem.Models.Advertiser")
                        .WithMany("Advertisements")
                        .HasForeignKey("AdvertiserId1");
                });

            modelBuilder.Entity("GlobalReviewSystem.Models.Company", b =>
                {
                    b.HasOne("GlobalReviewSystem.Models.Company", "ParentCompany")
                        .WithMany("Subsidiaries")
                        .HasForeignKey("ParentCompanyId");
                });

            modelBuilder.Entity("GlobalReviewSystem.Models.Field", b =>
                {
                    b.HasOne("GlobalReviewSystem.Models.Validator")
                        .WithMany("Fields")
                        .HasForeignKey("ValidatorId");
                });

            modelBuilder.Entity("GlobalReviewSystem.Models.FormField", b =>
                {
                    b.HasOne("GlobalReviewSystem.Models.Field", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId");

                    b.HasOne("GlobalReviewSystem.Models.Form", "Form")
                        .WithMany("FormFields")
                        .HasForeignKey("FormId");
                });

            modelBuilder.Entity("GlobalReviewSystem.Models.FormFieldValue", b =>
                {
                    b.HasOne("GlobalReviewSystem.Models.FormField", "FormField")
                        .WithMany()
                        .HasForeignKey("FormFieldId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GlobalReviewSystem.Models.Post", "Post")
                        .WithMany("FormFieldValues")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GlobalReviewSystem.Models.Image", b =>
                {
                    b.HasOne("GlobalReviewSystem.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GlobalReviewSystem.Models.Payment", b =>
                {
                    b.HasOne("GlobalReviewSystem.Models.Advertiser", "Advertiser")
                        .WithMany()
                        .HasForeignKey("AdvertiserId");
                });

            modelBuilder.Entity("GlobalReviewSystem.Models.Post", b =>
                {
                    b.HasOne("GlobalReviewSystem.Models.AppUser", "PostingUser")
                        .WithMany("Posts")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("GlobalReviewSystem.Models.Product", b =>
                {
                    b.HasOne("GlobalReviewSystem.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GlobalReviewSystem.Models.Company", "Company")
                        .WithMany("Products")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GlobalReviewSystem.Models.StateRegion", b =>
                {
                    b.HasOne("GlobalReviewSystem.Models.Country", "Country")
                        .WithMany("StatesOrRegions")
                        .HasForeignKey("CountryCode");
                });

            modelBuilder.Entity("GlobalReviewSystem.Models.Validator", b =>
                {
                    b.HasOne("GlobalReviewSystem.Models.Field")
                        .WithMany("Validators")
                        .HasForeignKey("FieldId");

                    b.HasOne("GlobalReviewSystem.Models.FormField")
                        .WithMany("Validators")
                        .HasForeignKey("FormFieldId");
                });

            modelBuilder.Entity("GlobalReviewSystem.Models.ValidatorProperty", b =>
                {
                    b.HasOne("GlobalReviewSystem.Models.Validator", "Validator")
                        .WithMany("Properties")
                        .HasForeignKey("ValidatorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GlobalReviewSystem.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GlobalReviewSystem.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GlobalReviewSystem.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GlobalReviewSystem.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
